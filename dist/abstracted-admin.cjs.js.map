{"version":3,"file":"abstracted-admin.cjs.js","sources":["esnext/EventManager.js","esnext/db.js"],"sourcesContent":["import { EventEmitter } from \"events\";\nexport class EventManager extends EventEmitter {\n    connection(state) {\n        this.emit(\"connection\", state);\n    }\n}\n","import * as firebase from \"firebase-admin\";\nimport * as process from \"process\";\nimport { RealTimeDB, _getFirebaseType } from \"abstracted-firebase\";\nimport { EventManager } from \"./EventManager\";\nexport class DB extends RealTimeDB {\n    /**\n     * Instantiates a DB and then waits for the connection\n     * to finish before resolving the promise.\n     */\n    static async connect(config) {\n        const obj = new DB(config);\n        await obj.waitForConnection();\n        return obj;\n    }\n    constructor(config) {\n        super();\n        this._eventManager = new EventManager();\n        const defaults = {\n            name: \"[DEFAULT]\"\n        };\n        if (process.env[\"FIREBASE_SERVICE_ACCOUNT\"]) {\n            defaults.serviceAccount = process.env[\"FIREBASE_SERVICE_ACCOUNT\"];\n        }\n        if (process.env[\"FIREBASE_DATA_ROOT_URL\"]) {\n            defaults.databaseUrl = process.env[\"FIREBASE_DATA_ROOT_URL\"];\n        }\n        config = Object.assign({}, defaults, (config || {}));\n        if (!config.mocking && (!config.serviceAccount || !config.databaseUrl)) {\n            const e = new Error(`You must have both the serviceAccount and databaseUrl set if you are starting a non-mocking database. You can include these as ENV variables or pass them with the constructor`);\n            e.name = \"AbstractedAdmin::InsufficientDetails\";\n            throw e;\n        }\n        this.initialize(config);\n    }\n    get auth() {\n        return _getFirebaseType(this, \"auth\");\n    }\n    get firestore() {\n        return _getFirebaseType(this, \"firestore\");\n    }\n    get database() {\n        return _getFirebaseType(this, \"database\");\n    }\n    get messaging() {\n        return _getFirebaseType(this, \"messaging\");\n    }\n    get storage() {\n        return _getFirebaseType(this, \"storage\");\n    }\n    async connectToFirebase(config) {\n        if (!this._isAuthorized) {\n            const serviceAcctEncoded = config.serviceAccount || process.env[\"FIREBASE_SERVICE_ACCOUNT\"];\n            if (!serviceAcctEncoded) {\n                throw new Error(\"Problem loading the credientials for Firebase admin API. Please ensure FIREBASE_SERVICE_ACCOUNT is set with base64 encoded version of Firebase private key.\");\n            }\n            const serviceAccount = JSON.parse(Buffer.from(process.env[\"FIREBASE_SERVICE_ACCOUNT\"], \"base64\").toString());\n            console.log(`Connecting to Firebase: [${process.env[\"FIREBASE_DATA_ROOT_URL\"]}]`);\n            try {\n                const { name } = config;\n                const runningApps = new Set(firebase.apps.map(i => i.name));\n                this.app = runningApps.has(name)\n                    ? firebase.app()\n                    : firebase.initializeApp({\n                        credential: firebase.credential.cert(serviceAccount),\n                        databaseURL: config.databaseUrl\n                    });\n                this._isAuthorized = true;\n                this._database = firebase.database();\n                this.enableDatabaseLogging = firebase.database.enableLogging.bind(firebase.database);\n                this.app = firebase;\n                firebase.database().goOnline();\n                new EventManager().connection(true);\n                firebase\n                    .database()\n                    .ref(\".info/connected\")\n                    .on(\"value\", snap => {\n                    this._isConnected = snap.val();\n                    // cycle through temporary clients\n                    this._waitingForConnection.forEach(cb => cb());\n                    this._waitingForConnection = [];\n                    // call active listeners\n                    if (this.isConnected) {\n                        this._onConnected.forEach(listener => listener.cb(this));\n                    }\n                    else {\n                        this._onDisconnected.forEach(listener => listener.cb(this));\n                    }\n                });\n            }\n            catch (err) {\n                if (err.message.indexOf(\"The default Firebase app already exists.\") !== -1) {\n                    console.warn(\"DB was already logged in, however flag had not been set!\");\n                    this._isConnected = true;\n                }\n                else {\n                    this._isConnected = false;\n                    console.warn(\"Problem connecting to Firebase\", err);\n                    throw new Error(err);\n                }\n            }\n        }\n        if (config.debugging) {\n            this.enableDatabaseLogging(typeof config.debugging === \"function\"\n                ? (message) => config.debugging(message)\n                : (message) => console.log(\"[FIREBASE]\", message));\n        }\n    }\n    /**\n     * listenForConnectionStatus\n     *\n     * in the admin interface we assume that ONCE connected\n     * we remain connected; this is unlike the client API\n     * which provides an endpoint to lookup\n     */\n    async listenForConnectionStatus() {\n        return new Promise(resolve => {\n            const cb = () => {\n                resolve();\n            };\n            this._waitingForConnection.push(cb);\n        });\n    }\n}\n"],"names":["EventEmitter","RealTimeDB","process.env","_getFirebaseType","firebase.apps","firebase.app","firebase.initializeApp","firebase.credential","firebase.database","firebase\n                    .database"],"mappings":"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"}